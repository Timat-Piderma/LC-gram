-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParGram.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListStm -> ListStm                         (1)
	%start_pStm -> Stm                                 (2)
	%start_pDecl -> Decl                               (3)
	%start_pAss -> Ass                                 (4)
	Ident -> L_Ident                                   (5)
	Double -> L_doubl                                  (6)
	Integer -> L_integ                                 (7)
	Program -> ListStm                                 (8)
	ListStm -> Stm ';'                                 (9)
	ListStm -> Stm ';' ListStm                         (10)
	Stm -> Decl                                        (11)
	Stm -> Ass                                         (12)
	Decl -> 'int' Ident '=' Integer                    (13)
	Decl -> 'float' Ident '=' Double                   (14)
	Ass -> Ident '=' Ident '+' Ident                   (15)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { PT _ (TS _ 1) }
	';'            { PT _ (TS _ 2) }
	'='            { PT _ (TS _ 3) }
	'float'        { PT _ (TS _ 4) }
	'int'          { PT _ (TS _ 5) }
	L_Ident        { PT _ (TV $$) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListStm rule  1
	%start_pStm     rule  2
	%start_pDecl    rule  3
	%start_pAss     rule  4
	Ident           rule  5
	Double          rule  6
	Integer         rule  7
	Program         rule  8
	ListStm         rules 9, 10
	Stm             rules 11, 12
	Decl            rules 13, 14
	Ass             rule  15

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'float'        shift, and enter state 10
	'int'          shift, and enter state 11
	L_Ident        shift, and enter state 6

	Ident          goto state 7
	Program        goto state 17
	ListStm        goto state 18
	Stm            goto state 16
	Decl           goto state 13
	Ass            goto state 14

State 1

	%start_pListStm -> . ListStm                        (rule 1)

	'float'        shift, and enter state 10
	'int'          shift, and enter state 11
	L_Ident        shift, and enter state 6

	Ident          goto state 7
	ListStm        goto state 15
	Stm            goto state 16
	Decl           goto state 13
	Ass            goto state 14

State 2

	%start_pStm -> . Stm                                (rule 2)

	'float'        shift, and enter state 10
	'int'          shift, and enter state 11
	L_Ident        shift, and enter state 6

	Ident          goto state 7
	Stm            goto state 12
	Decl           goto state 13
	Ass            goto state 14

State 3

	%start_pDecl -> . Decl                              (rule 3)

	'float'        shift, and enter state 10
	'int'          shift, and enter state 11

	Decl           goto state 9

State 4

	%start_pAss -> . Ass                                (rule 4)

	L_Ident        shift, and enter state 6

	Ident          goto state 7
	Ass            goto state 8

State 5

	Ident -> . L_Ident                                  (rule 5)

	L_Ident        shift, and enter state 6


State 6

	Ident -> L_Ident .                                  (rule 5)

	'+'            reduce using rule 5
	';'            reduce using rule 5
	'='            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Ass -> Ident . '=' Ident '+' Ident                  (rule 15)

	'='            shift, and enter state 22


State 8

	%start_pAss -> Ass .                                (rule 4)

	%eof           accept


State 9

	%start_pDecl -> Decl .                              (rule 3)

	%eof           accept


State 10

	Decl -> 'float' . Ident '=' Double                  (rule 14)

	L_Ident        shift, and enter state 6

	Ident          goto state 21

State 11

	Decl -> 'int' . Ident '=' Integer                   (rule 13)

	L_Ident        shift, and enter state 6

	Ident          goto state 20

State 12

	%start_pStm -> Stm .                                (rule 2)

	%eof           accept


State 13

	Stm -> Decl .                                       (rule 11)

	';'            reduce using rule 11
	%eof           reduce using rule 11


State 14

	Stm -> Ass .                                        (rule 12)

	';'            reduce using rule 12
	%eof           reduce using rule 12


State 15

	%start_pListStm -> ListStm .                        (rule 1)

	%eof           accept


State 16

	ListStm -> Stm . ';'                                (rule 9)
	ListStm -> Stm . ';' ListStm                        (rule 10)

	';'            shift, and enter state 19


State 17

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 18

	Program -> ListStm .                                (rule 8)

	%eof           reduce using rule 8


State 19

	ListStm -> Stm ';' .                                (rule 9)
	ListStm -> Stm ';' . ListStm                        (rule 10)

	'float'        shift, and enter state 10
	'int'          shift, and enter state 11
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 9

	Ident          goto state 7
	ListStm        goto state 26
	Stm            goto state 16
	Decl           goto state 13
	Ass            goto state 14

State 20

	Decl -> 'int' Ident . '=' Integer                   (rule 13)

	'='            shift, and enter state 25


State 21

	Decl -> 'float' Ident . '=' Double                  (rule 14)

	'='            shift, and enter state 24


State 22

	Ass -> Ident '=' . Ident '+' Ident                  (rule 15)

	L_Ident        shift, and enter state 6

	Ident          goto state 23

State 23

	Ass -> Ident '=' Ident . '+' Ident                  (rule 15)

	'+'            shift, and enter state 31


State 24

	Decl -> 'float' Ident '=' . Double                  (rule 14)

	L_doubl        shift, and enter state 30

	Double         goto state 29

State 25

	Decl -> 'int' Ident '=' . Integer                   (rule 13)

	L_integ        shift, and enter state 28

	Integer        goto state 27

State 26

	ListStm -> Stm ';' ListStm .                        (rule 10)

	%eof           reduce using rule 10


State 27

	Decl -> 'int' Ident '=' Integer .                   (rule 13)

	';'            reduce using rule 13
	%eof           reduce using rule 13


State 28

	Integer -> L_integ .                                (rule 7)

	';'            reduce using rule 7
	%eof           reduce using rule 7


State 29

	Decl -> 'float' Ident '=' Double .                  (rule 14)

	';'            reduce using rule 14
	%eof           reduce using rule 14


State 30

	Double -> L_doubl .                                 (rule 6)

	';'            reduce using rule 6
	%eof           reduce using rule 6


State 31

	Ass -> Ident '=' Ident '+' . Ident                  (rule 15)

	L_Ident        shift, and enter state 6

	Ident          goto state 32

State 32

	Ass -> Ident '=' Ident '+' Ident .                  (rule 15)

	';'            reduce using rule 15
	%eof           reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 16
Number of terminals: 8
Number of non-terminals: 13
Number of states: 33
