-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGram
  ( happyError
  , myLexer
  , pProgram
  , pListStm
  , pStm
  , pDecl
  , pAss
  ) where

import Prelude

import qualified Env
import qualified AbsGram
import LexGram

}

%name pProgram Program
%name pListStm ListStm
%name pStm Stm
%name pDecl Decl
%name pAss Ass
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '+'      { PT _ (TS _ 1) }
  ';'      { PT _ (TS _ 2) }
  '='      { PT _ (TS _ 3) }
  'float'  { PT _ (TS _ 4) }
  'int'    { PT _ (TS _ 5) }
  L_Ident  { PT _ (TV $$)  }
  L_doubl  { PT _ (TD $$)  }
  L_integ  { PT _ (TI $$)  }

%attributetype {Attr a}
%attribute res { AbsGram.Result }
%attribute attr { a }
%attribute err { [String] }
%attribute env { Env.EnvT }
%attribute ident { String }

%%

Ident  : L_Ident 
  { 
    $$.attr = AbsGram.Ident $1;
    $$.ident = $1;
    $$.err = ["--IDENT--"];
  }

Double   : L_doubl  
  { 
    $$.attr = (read $1) :: Double;
    
    $$.err = ["--DOUBLE--"];
  }

Integer  : L_integ  
  { 
    $$.attr = (read $1) :: Integer;
    
    $$.err = ["--INTEGER--"];
  }


Program : ListStm 
  { 
    $$.res = AbsGram.Result (AbsGram.ProgramStart $1.attr) $1.env $1.err;
    $1.env = Env.emptyEnv;
  }


ListStm : Stm ';' 
  { 
    $$.attr = (:[]) $1.attr;

    $1.env = $$.env;

    $$.err = if Env.containsVar $1.ident $$.env
      then ["contains "++ $1.ident]
      else ["does not contain " ++ $1.ident];
  } 
| Stm ';' ListStm 
  { 
    $$.attr = (:) $1.attr $3.attr;

    $1.env = $$.env;
    $3.env = Env.insertVar $1.ident (123, 123) $$.env;

    $$.err = if Env.containsVar $1.ident $$.env
      then ["contains " ++ $1.ident ++ " = " ++ (show (Env.getVarPos $1.ident $$.env))] ++ $3.err
      else ["does not contain " ++ $1.ident] ++ $3.err;
  }


Stm: Decl
  { 
    $$.attr = AbsGram.VarDeclaration $1.attr;

    $1.env = $$.env; 

    $$.err = $1.err;

    $$.ident = $1.ident;
  }
| Ass 
  { 
    $$.attr = AbsGram.Assignment $1.attr;

    $1.env = $$.env;

    $$.err = $1.err;

    $$.ident = $1.ident;
  }

Decl: 'int' Ident '=' Integer 
  {
    $$.attr = AbsGram.IntVarDeclaration $2.attr $4.attr;

    $2.env = $$.env;
    $4.env = $$.env;

    $$.err = $4.err;

    $$.ident = $2.ident;
  }
  | 'float' Ident '=' Double 
  {
    $$.attr = AbsGram.FloatVarDeclaration $2.attr $4.attr;

    $2.env = $$.env;
    $4.env = $$.env;

    $$.err = $4.err;

    $$.ident = $2.ident;
  }

Ass : Ident '=' Ident '+' Ident 
  {  
    $$.attr = AbsGram.SumAssignment $1.attr $3.attr $5.attr;

    $1.env = $$.env;
    $3.env = $$.env;
    $5.env = $$.env;

    $$.err = ["Assignment"];

    $$.ident = $1.ident;
  }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

