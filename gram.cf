ProgramStart.               Program ::= [Stm];
terminator nonempty Stm ";";

rules BasicType ::= "int" | "float" | "char" | "String" | "bool";
rules Boolean ::= "True" | "False";

Declaration.                Stm ::= Decl;

VarDeclaration.             Decl ::= BasicType Ident "=" RExp;
ArrayDeclaration.           Decl ::= BasicType Ident "[" Integer "]";


Assignment.                 Stm ::= Ident "=" RExp;

Or.                         RExp ::= RExp "||" RExp2;
And.                        RExp ::= RExp "&&" RExp2;
Not.                        RExp ::= "!" RExp2;

Eq.                         RExp2 ::= RExp2 "==" RExp3;
Neq.                        RExp2 ::= RExp2 "!=" RExp3;
Lt.                         RExp2 ::= RExp2 "<" RExp3;
Gt.                         RExp2 ::= RExp2 ">" RExp3;
Le.                         RExp2 ::= RExp2 "<=" RExp3;
Ge.                         RExp2 ::= RExp2 ">=" RExp3;

Add.                        RExp3 ::= RExp3 "+" RExp4;
Sub.                        RExp3 ::= RExp3 "-" RExp4;
Mul.                        RExp3 ::= RExp3 "*" RExp4;
Div.                        RExp3 ::= RExp3 "/" RExp4;
Mod.                        RExp3 ::= RExp3 "%" RExp4;

IntValue.                   RExp4 ::= Integer;
FloatValue.                 RExp4 ::= Double;
StringValue.                RExp4 ::= String;
CharValue.                  RExp4 ::= Char;
BooleanValue.               RExp4 ::= Boolean;
VarValue.                   RExp4 ::= Ident;

coercions RExp 4;